/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
// Comparison function for ascending order
int compare(const void *a, const void *b) {
    int int_a = *(int *)a;
    int int_b = *(int *)b;

    if (int_a < int_b)
        return -1;
    else if (int_a > int_b)
        return 1;
    else
        return 0;
}
void solver(struct TreeNode* root, int swapped[]){
    if(root == NULL) return;

    if(root->val == swapped[0]) root->val = swapped[1];
    else if(root->val == swapped[1]) root->val = swapped[0];

    solver(root->left, swapped);
    solver(root->right, swapped);
}
void inorder(struct TreeNode* root , int* arr , int *len)
{
    if(root == NULL)
        return;
    inorder(root->left , arr , len);
    arr[(*len)++] = root->val;
    inorder(root->right , arr , len);    
}
void recoverTree(struct TreeNode* root) {
    int* arr = (int*)malloc(sizeof(int)*1000);
    int len = 0;
    inorder(root , arr , &len);
    int swapped[2];
    int j = 0;
    // Create a copy of the original array
    int sorted[len];
    memcpy(sorted, arr, len * sizeof(int));

    // Sort the copied array
    qsort(sorted, len, sizeof(int), compare);
    for(int k = 0; k < len; k++)
    {
        if(sorted[k] != arr[k])
        {
            swapped[j++] = arr[k];
        }
    }
    printf("%d %d" , swapped[0] , swapped[1]);

    solver(root, swapped);
    free(arr);
}
