#include <stdbool.h>
#include <string.h>

// Helper function to check if two strings have the same characters
bool isAnagram(const char* s1, const char* s2, int len) {
    int count[26] = {0};
    for (int i = 0; i < len; i++) {
        count[s1[i] - 'a']++;
        count[s2[i] - 'a']--;
    }
    for (int i = 0; i < 26; i++) {
        if (count[i] != 0) return false;
    }
    return true;
}

// Memoization table
int dp[31][31][31];  // dp[start1][start2][length] = 0 (uncomputed), 1 (true), -1 (false)

// Recursive function to check if s2 is a scramble of s1
bool isScrambleUtil(const char* s1, const char* s2, int start1, int start2, int length) {
    if (dp[start1][start2][length] != 0) {
        return dp[start1][start2][length] == 1;
    }
    
    // Base cases
    if (strncmp(s1 + start1, s2 + start2, length) == 0) {
        dp[start1][start2][length] = 1;
        return true;
    }
    if (!isAnagram(s1 + start1, s2 + start2, length)) {
        dp[start1][start2][length] = -1;
        return false;
    }
    
    // Try every possible split
    for (int i = 1; i < length; i++) {
        // Check no swap case
        if (isScrambleUtil(s1, s2, start1, start2, i) &&
            isScrambleUtil(s1, s2, start1 + i, start2 + i, length - i)) {
            dp[start1][start2][length] = 1;
            return true;
        }
        
        // Check swap case
        if (isScrambleUtil(s1, s2, start1, start2 + length - i, i) &&
            isScrambleUtil(s1, s2, start1 + i, start2, length - i)) {
            dp[start1][start2][length] = 1;
            return true;
        }
    }
    
    dp[start1][start2][length] = -1;
    return false;
}

bool isScramble(char* s1, char* s2) {
    int len = strlen(s1);
    if (len != strlen(s2)) return false;
    
    // Initialize memoization table
    memset(dp, 0, sizeof(dp));
    
    return isScrambleUtil(s1, s2, 0, 0, len);
}
